// Telegram Bot SDK for Swift (unofficial).
// This file is autogenerated by API/generate_wrappers.rb script.

import Foundation
import Dispatch

public extension TelegramBot {
    typealias SendInvoiceCompletion = (_ result: Message?, _ error: DataTaskError?) -> ()

    /// Use this method to send invoices. On success, the sent Message is returned.
    /// - Parameters:
    ///     - chat_id: Unique identifier for the target private chat
    ///     - title: Product name, 1-32 characters
    ///     - description: Product description, 1-255 characters
    ///     - payload: Bot-defined invoice payload, 1-128 bytes. This will not be displayed to the user, use for your internal processes.
    ///     - provider_token: Payments provider token, obtained via Botfather
    ///     - start_parameter: Unique deep-linking parameter that can be used to generate this invoice when used as a start parameter
    ///     - currency: Three-letter ISO 4217 currency code, see more on currencies
    ///     - prices: Price breakdown, a list of components (e.g. product price, tax, discount, delivery cost, delivery tax, bonus, etc.)
    ///     - provider_data: JSON-encoded data about the invoice, which will be shared with the payment provider. A detailed description of required fields should be provided by the payment provider.
    ///     - photo_url: URL of the product photo for the invoice. Can be a photo of the goods or a marketing image for a service. People like it better when they see what they are paying for.
    ///     - photo_size: Photo size
    ///     - photo_width: Photo width
    ///     - photo_height: Photo height
    ///     - need_name: Pass True, if you require the user's full name to complete the order
    ///     - need_phone_number: Pass True, if you require the user's phone number to complete the order
    ///     - need_email: Pass True, if you require the user's email address to complete the order
    ///     - need_shipping_address: Pass True, if you require the user's shipping address to complete the order
    ///     - send_phone_number_to_provider: Pass True, if user's phone number should be sent to provider
    ///     - send_email_to_provider: Pass True, if user's email address should be sent to provider
    ///     - is_flexible: Pass True, if the final price depends on the shipping method
    ///     - disable_notification: Sends the message silently. Users will receive a notification with no sound.
    ///     - reply_to_message_id: If the message is a reply, ID of the original message
    ///     - reply_markup: A JSON-serialized object for an inline keyboard. If empty, one 'Pay total price' button will be shown. If not empty, the first button must be a Pay button.
    /// - Returns: Message on success. Nil on error, in which case `TelegramBot.lastError` contains the details.
    /// - Note: Blocking version of the method.
    ///
    /// - SeeAlso: <https://core.telegram.org/bots/api#sendinvoice>
    @discardableResult
    public func sendInvoiceSync(
            chatId: Int64,
            title: String,
            description: String,
            payload: String,
            providerToken: String,
            startParameter: String,
            currency: String,
            prices: [LabeledPrice],
            providerData: String? = nil,
            photoUrl: String? = nil,
            photoSize: Int? = nil,
            photoWidth: Int? = nil,
            photoHeight: Int? = nil,
            needName: Bool? = nil,
            needPhoneNumber: Bool? = nil,
            needEmail: Bool? = nil,
            needShippingAddress: Bool? = nil,
            sendPhoneNumberToProvider: Bool? = nil,
            sendEmailToProvider: Bool? = nil,
            isFlexible: Bool? = nil,
            disableNotification: Bool? = nil,
            replyToMessageId: Int? = nil,
            replyMarkup: InlineKeyboardMarkup? = nil,
            _ parameters: [String: Any?] = [:]) -> Message? {
        return requestSync("sendInvoice", defaultParameters["sendInvoice"], parameters, [
            "chat_id": chatId,
            "title": title,
            "description": description,
            "payload": payload,
            "provider_token": providerToken,
            "start_parameter": startParameter,
            "currency": currency,
            "prices": prices,
            "provider_data": providerData,
            "photo_url": photoUrl,
            "photo_size": photoSize,
            "photo_width": photoWidth,
            "photo_height": photoHeight,
            "need_name": needName,
            "need_phone_number": needPhoneNumber,
            "need_email": needEmail,
            "need_shipping_address": needShippingAddress,
            "send_phone_number_to_provider": sendPhoneNumberToProvider,
            "send_email_to_provider": sendEmailToProvider,
            "is_flexible": isFlexible,
            "disable_notification": disableNotification,
            "reply_to_message_id": replyToMessageId,
            "reply_markup": replyMarkup])
    }

    /// Use this method to send invoices. On success, the sent Message is returned.
    /// - Parameters:
    ///     - chat_id: Unique identifier for the target private chat
    ///     - title: Product name, 1-32 characters
    ///     - description: Product description, 1-255 characters
    ///     - payload: Bot-defined invoice payload, 1-128 bytes. This will not be displayed to the user, use for your internal processes.
    ///     - provider_token: Payments provider token, obtained via Botfather
    ///     - start_parameter: Unique deep-linking parameter that can be used to generate this invoice when used as a start parameter
    ///     - currency: Three-letter ISO 4217 currency code, see more on currencies
    ///     - prices: Price breakdown, a list of components (e.g. product price, tax, discount, delivery cost, delivery tax, bonus, etc.)
    ///     - provider_data: JSON-encoded data about the invoice, which will be shared with the payment provider. A detailed description of required fields should be provided by the payment provider.
    ///     - photo_url: URL of the product photo for the invoice. Can be a photo of the goods or a marketing image for a service. People like it better when they see what they are paying for.
    ///     - photo_size: Photo size
    ///     - photo_width: Photo width
    ///     - photo_height: Photo height
    ///     - need_name: Pass True, if you require the user's full name to complete the order
    ///     - need_phone_number: Pass True, if you require the user's phone number to complete the order
    ///     - need_email: Pass True, if you require the user's email address to complete the order
    ///     - need_shipping_address: Pass True, if you require the user's shipping address to complete the order
    ///     - send_phone_number_to_provider: Pass True, if user's phone number should be sent to provider
    ///     - send_email_to_provider: Pass True, if user's email address should be sent to provider
    ///     - is_flexible: Pass True, if the final price depends on the shipping method
    ///     - disable_notification: Sends the message silently. Users will receive a notification with no sound.
    ///     - reply_to_message_id: If the message is a reply, ID of the original message
    ///     - reply_markup: A JSON-serialized object for an inline keyboard. If empty, one 'Pay total price' button will be shown. If not empty, the first button must be a Pay button.
    /// - Returns: Message on success. Nil on error, in which case `error` contains the details.
    /// - Note: Asynchronous version of the method.
    ///
    /// - SeeAlso: <https://core.telegram.org/bots/api#sendinvoice>
    public func sendInvoiceAsync(
            chatId: Int64,
            title: String,
            description: String,
            payload: String,
            providerToken: String,
            startParameter: String,
            currency: String,
            prices: [LabeledPrice],
            providerData: String? = nil,
            photoUrl: String? = nil,
            photoSize: Int? = nil,
            photoWidth: Int? = nil,
            photoHeight: Int? = nil,
            needName: Bool? = nil,
            needPhoneNumber: Bool? = nil,
            needEmail: Bool? = nil,
            needShippingAddress: Bool? = nil,
            sendPhoneNumberToProvider: Bool? = nil,
            sendEmailToProvider: Bool? = nil,
            isFlexible: Bool? = nil,
            disableNotification: Bool? = nil,
            replyToMessageId: Int? = nil,
            replyMarkup: InlineKeyboardMarkup? = nil,
            _ parameters: [String: Any?] = [:],
            queue: DispatchQueue = .main,
            completion: SendInvoiceCompletion? = nil) {
        return requestAsync("sendInvoice", defaultParameters["sendInvoice"], parameters, [
            "chat_id": chatId,
            "title": title,
            "description": description,
            "payload": payload,
            "provider_token": providerToken,
            "start_parameter": startParameter,
            "currency": currency,
            "prices": prices,
            "provider_data": providerData,
            "photo_url": photoUrl,
            "photo_size": photoSize,
            "photo_width": photoWidth,
            "photo_height": photoHeight,
            "need_name": needName,
            "need_phone_number": needPhoneNumber,
            "need_email": needEmail,
            "need_shipping_address": needShippingAddress,
            "send_phone_number_to_provider": sendPhoneNumberToProvider,
            "send_email_to_provider": sendEmailToProvider,
            "is_flexible": isFlexible,
            "disable_notification": disableNotification,
            "reply_to_message_id": replyToMessageId,
            "reply_markup": replyMarkup],
            queue: queue, completion: completion)
    }
}

